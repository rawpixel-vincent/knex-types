{"version":3,"file":"main.js","names":["_fs","_interopRequireDefault","require","e","__esModule","default","updateTypes","db","options","_options$overrides","_ref","_ref2","overrides","output","fs","createWriteStream","encoding","forEach","line","write","schema","split","map","x","trim","includeSchemas","excludeSchemas","reduce","acc","s","startsWith","push","exclude","prefix","enumsMap","Map","columns","withSchema","table","whereIn","whereNotIn","orderBy","select","raw","tableSet","Set","Array","from","value","_overrides$value","key","_upperFirst2","_camelCase2","_overrides$key","i","_overrides$x$table","tableName","schemaName","type","getType","udt","substring","nullable","sanitize","column","suffix","end","destroy","customTypes","defaultValue","_customTypes$get","get","name","test","JSON","stringify"],"sources":["main.ts"],"sourcesContent":["/* SPDX-FileCopyrightText: 2016-present Kriasoft <hello@kriasoft.com> */\n/* SPDX-License-Identifier: MIT */\n\nimport fs from 'fs';\nimport { Knex } from 'knex';\nimport { camelCase, upperFirst } from 'lodash';\nimport type { Writable } from 'stream';\n\nexport type Options = {\n  /**\n   * Filename or output stream where the type definitions needs to be written.\n   */\n  output: Writable | string;\n\n  /**\n   * Name overrides for enums, classes, and fields.\n   *\n   * @example\n   *   overrides: {\n   *     \"identity_provider.linkedin\": \"LinkedIn\"\n   *   }\n   */\n  overrides?: Record<string, string>;\n\n  prefix?: string;\n  suffix?: string;\n\n  /**\n   * Schemas that should be included/excluded when generating types.\n   *\n   * By default if this is null/not specified, \"public\" will be the only schema added, but if this property\n   * is specified, public will be excluded by default and has to be included in the list to be added to the output.\n   * If a schema is added by its name, i.e. 'log' all tables from that schema will be added.\n   * If a schema name is added with an exclamation mark it will be ignored, i.e. \"!log\".\n   *\n   * The table-type will be prefixed by its schema name, the table log.message will become LogMessage.\n   *\n   * @example\n   *   // This will include \"public\" and \"log\", but exclude the \"auth\" schema.\n   *   schema: [\"public\", \"log\", \"!auth\"]\n   * @default\n   *   \"public\"\n   */\n  schema?: string[] | string;\n\n  /**\n   * A comma separated list or an array of tables that should be excluded when\n   * generating types.\n   *\n   * @example\n   *   exclude: [\"migration\", \"migration_lock\"]\n   */\n  exclude?: string[] | string;\n};\n\n/**\n * Generates TypeScript definitions (types) from a PostgreSQL database schema.\n */\nexport async function updateTypes(db: Knex, options: Options): Promise<void> {\n  const overrides: Record<string, string> = options.overrides ?? {};\n  const output: Writable =\n    typeof options.output === 'string'\n      ? fs.createWriteStream(options.output, { encoding: 'utf-8' })\n      : options.output;\n\n  [\n    '// The TypeScript definitions below are automatically generated.\\n',\n    '// Do not touch them, or risk, your modifications being lost.\\n\\n',\n  ].forEach((line) => output.write(line));\n\n  const schema = (typeof options.schema === 'string'\n    ? options.schema.split(',').map((x) => x.trim())\n    : options.schema) ?? ['public'];\n\n  // Schemas to include or exclude\n  const [includeSchemas, excludeSchemas] = schema.reduce(\n    (acc, s) =>\n      (acc[+s.startsWith('!')].push(s) && acc) as [string[], string[]],\n    [[] as string[], [] as string[]],\n  );\n\n  // Tables to exclude\n  const exclude =\n    (typeof options.exclude === 'string'\n      ? options.exclude.split(',').map((x) => x.trim())\n      : options.exclude) ?? [];\n\n  if (options.prefix) {\n    output.write(options.prefix);\n    output.write('\\n\\n');\n  }\n\n  try {\n    const enumsMap = new Map<string, string>();\n    // Fetch the list of tables/columns\n    const columns = await db\n      .withSchema('information_schema')\n      .table('columns')\n      .whereIn('table_schema', includeSchemas)\n      .whereNotIn('table_schema', excludeSchemas)\n      .whereNotIn('table_name', exclude)\n      .orderBy('table_schema')\n      .orderBy('table_name')\n      .orderBy('ordinal_position')\n      .select<Column[]>(\n        'table_schema as schema',\n        'table_name as table',\n        'column_name as column',\n        db.raw(\"(is_nullable = 'YES') as nullable\"),\n        'column_default as default',\n        'data_type as type',\n        'udt_name as udt',\n      );\n\n    // The list of database tables as enum\n    output.write('export enum Table {\\n');\n    const tableSet = new Set(\n      columns.map((x) => {\n        const schema = x.schema !== 'public' ? `${x.schema}.` : '';\n        return `${schema}${x.table}`;\n      }),\n    );\n    Array.from(tableSet).forEach((value) => {\n      const key = overrides[value] ?? upperFirst(camelCase(value));\n      output.write(`  ${key} = \"${value}\",\\n`);\n    });\n    output.write('}\\n\\n');\n    // The list of tables as type\n    output.write('export type Tables = {\\n');\n    Array.from(tableSet).forEach((key) => {\n      const value = overrides[key] ?? upperFirst(camelCase(key));\n      output.write(`  \"${key}\": ${value},\\n`);\n    });\n    output.write('};\\n\\n');\n\n    // Construct TypeScript db record types\n    columns.forEach((x, i) => {\n      if (!(columns[i - 1] && columns[i - 1].table === x.table)) {\n        const tableName = overrides[x.table] ?? upperFirst(camelCase(x.table));\n        const schemaName =\n          x.schema !== 'public' ? upperFirst(camelCase(x.schema)) : '';\n        output.write(`export type ${schemaName}${tableName} = {\\n`);\n      }\n\n      let type =\n        x.type === 'ARRAY'\n          ? `${getType(x.udt.substring(1), enumsMap, x.default)}[]`\n          : getType(x.udt, enumsMap, x.default);\n\n      if (x.nullable) {\n        type += ' | null';\n      }\n\n      output.write(`  ${sanitize(x.column)}: ${type};\\n`);\n\n      if (!(columns[i + 1] && columns[i + 1].table === x.table)) {\n        output.write('};\\n\\n');\n      }\n    });\n\n    if (options.suffix) {\n      output.write(options.suffix);\n      output.write('\\n');\n    }\n  } finally {\n    output.end();\n    db.destroy();\n  }\n}\n\ntype Enum = {\n  key: string;\n  value: string;\n};\n\ntype Column = {\n  table: string;\n  column: string;\n  schema: string;\n  nullable: boolean;\n  default: string | null;\n  type: string;\n  udt: string;\n};\n\nexport function getType(\n  udt: string,\n  customTypes: Map<string, string>,\n  defaultValue: string | null,\n): string {\n  switch (udt) {\n    case 'bool':\n      return 'boolean';\n    case 'text':\n    case 'citext':\n    case 'money':\n    case 'numeric':\n    case 'int8':\n    case 'char':\n    case 'character':\n    case 'bpchar':\n    case 'varchar':\n    case 'time':\n    case 'tsquery':\n    case 'tsvector':\n    case 'uuid':\n    case 'xml':\n    case 'cidr':\n    case 'inet':\n    case 'macaddr':\n      return 'string';\n    case 'smallint':\n    case 'integer':\n    case 'int':\n    case 'int2':\n    case 'int4':\n    case 'real':\n    case 'float':\n    case 'float4':\n    case 'float8':\n      return 'number';\n    case 'date':\n    case 'timestamp':\n    case 'timestamptz':\n      return 'Date';\n    case 'json':\n    case 'jsonb':\n      if (defaultValue) {\n        if (defaultValue.startsWith(\"'{\")) {\n          return 'Record<string, unknown>';\n        }\n        if (defaultValue.startsWith(\"'[\")) {\n          return 'unknown[]';\n        }\n      }\n      return 'unknown';\n    case 'bytea':\n      return 'Buffer';\n    case 'interval':\n      return 'PostgresInterval';\n    default:\n      return customTypes.get(udt) ?? 'unknown';\n  }\n}\n\n/**\n * Wraps the target property identifier into quotes in case it contains any\n * invalid characters.\n *\n * @see https://developer.mozilla.org/docs/Glossary/Identifier\n */\nfunction sanitize(name: string): string {\n  return /^[a-zA-Z$_][a-zA-Z$_0-9]*$/.test(name) ? name : JSON.stringify(name);\n}\n"],"mappings":"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","ignoreList":[]}